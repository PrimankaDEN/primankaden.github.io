<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 09 May 2015 00:29:55 +0300</pubDate>
    <lastBuildDate>Sat, 09 May 2015 00:29:55 +0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Volga CTF. Ppc300 Mathproblem - right up</title>
        <description>&lt;p&gt;Task:&lt;br /&gt;
mathproblem&lt;br /&gt;
nc mathproblem.2015.volgactf.ru 8888&lt;br /&gt;&lt;br /&gt;
After connect we see following:&lt;br /&gt;
&lt;b&gt;Greetings, neonate! Let us check if you can solve one particular problem!&lt;br /&gt;
You’re given a set of integer numbers x0,x1,…,xn and y. Using parenthesis ‘(‘ and ‘)’ and regular arithmetic operations ‘&lt;em&gt;’,’/’,’+’,’-‘ over integer numbers you need to find a mathematical expression that involves each and every xi and evaluates to y. Sending the correct expression advances you to the next round.&lt;br /&gt;
E.g. if the problem says ‘137 421 700 746 equals 1395’ your solution may look like this ‘(700-421)&lt;/em&gt;(746/137)’.&lt;br /&gt;
N.b. Division operation is done according to regular integer division rules, so 746/137 == 5 and (700-421)&lt;em&gt;(746/137) != (700-421)&lt;/em&gt;746/137.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;
Code:&lt;br /&gt;
import math
import socket
import itertools
from time import sleep&lt;/p&gt;

&lt;p&gt;def mathpr():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((“mathproblem.2015.volgactf.ru”, 8888))
    data = s.recv(1024)
    print data
    while 1:
        sleep(0.1)
        data = s.recv(1024)
        print data
        var = data.split(‘Solve!\n’)
        var = var[1].split(‘ equals ‘)
        nums = var[0].split(‘ ‘)
        for n in range(4):
            nums[n] = int(nums[n], 10)
        res = var[1]
        num = list(itertools.permutations([nums[0], nums[1], nums[2], nums[3]]))
        ops = list(itertools.product([’+’, ‘-‘, ‘&lt;em&gt;’, ‘/’], repeat=3))
        por = list(itertools.permutations([0, 1, 2]))
        print res
        print num
        print ops
        print por
        for n in num:
            for o in ops:
                for p in por:
                    curN = list(n)
                    curO = list(o)
                    curP = list(p)
                    for i in range(3):
                        curOpNum = curP.index(0)
                        n1 = curN[curOpNum]
                        n2 = curN[curOpNum + 1]
                        resN = 0
                        if curO[curOpNum] == ‘&lt;/em&gt;’:
                            resN = n1 * n2
                        if curO[curOpNum] == ‘/’:
                            if n2 == 0:
                                break
                            resN = n1 / n2
                        if curO[curOpNum] == ‘-‘:
                            resN = n1 - n2
                        if curO[curOpNum] == ‘+’:
                            resN = n1 + n2
                        curN[curOpNum] = resN
                        curN.pop(curOpNum + 1)
                        curO.pop(curOpNum)
                        curP.pop(curOpNum)
                        for b in range(len(curP)):
                            curP[b] -= 1
                    if int(res) == int(curN[0]):
                        numZero = list(p).index(0)
                        resres = ‘(‘ + str(n[numZero]) + o[numZero] + str(n[numZero + 1]) + ‘)’&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                    numOne = list(p).index(1)
                    if math.fabs(numOne-numZero)==2:
                        resres2 = '(' + str(n[numOne]) + o[numOne] + str(n[numOne + 1]) + ')'
                        if (numOne&amp;gt;numZero):
                            resres= resres+o[list(p).index(2)]+resres2
                        else :
                            resres= resres2+o[list(p).index(2)]+resres
                    else:
                        if (numOne&amp;gt;numZero):
                            resres = '('+resres+o[numOne]+str(n[numOne+1])+')'
                        else:
                            resres = '('+str(n[numOne])+o[numOne]+resres+')'

                        numTwo = list(p).index(2)
                        if (numTwo&amp;gt;numOne):
                            resres = '('+resres+o[numTwo]+str(n[numTwo+1])+')'
                        else:
                            resres = '('+str(n[numTwo])+o[numTwo]+resres+')'

    print resres
    s.send(resres)
s.close() mathpr()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Earch round it prints next:&lt;br /&gt;
# Round 8. Solve!&lt;br /&gt;
# 152 680 796 862 equals 796&lt;br /&gt;&lt;br /&gt;
and send:&lt;br /&gt;
# (((862/680)/152)+796)&lt;br /&gt;&lt;br /&gt;
After 30 rounds:&lt;br /&gt;
# That’s incredible! You’ve passed! Here’s your flag: &lt;b&gt;{you_count_as_fast_as_a_calculator}&lt;/b&gt;&lt;br /&gt;
# Farewell!&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2015 03:00:00 +0300</pubDate>
        <link>http://yourdomain.com/ctf/2015/05/10/volgactf-ppc-300.html</link>
        <guid isPermaLink="true">http://yourdomain.com/ctf/2015/05/10/volgactf-ppc-300.html</guid>
        
        
        <category>ctf</category>
        
      </item>
    
      <item>
        <title>Volga CTF. Stego400 - right up</title>
        <description>&lt;p&gt;Task:&lt;br /&gt;
There must be a hidden message somewhere.&lt;br /&gt;
Hints:&lt;br /&gt;
   * 2 bpp. That’s incredible.&lt;br /&gt;
   * 2x3 matrix embedding.&lt;br /&gt;
   * Jessica Fridrich would solve this task easily.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;image fill&quot;&gt;&lt;img src=&quot;/files/volgactf_stego400_lsb.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Image&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tlsb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;stego.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;RGB&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3121&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;flag.png&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tlsb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Result:&lt;br /&gt;
&lt;a class=&quot;image fill&quot;&gt;&lt;img src=&quot;/files/volgactf_stego400_result.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 03:37:10 +0300</pubDate>
        <link>http://yourdomain.com/ctf/2015/05/08/volgactf-stego-400.html</link>
        <guid isPermaLink="true">http://yourdomain.com/ctf/2015/05/08/volgactf-stego-400.html</guid>
        
        
        <category>ctf</category>
        
      </item>
    
      <item>
        <title>Реверс APK на примере несложной малвари</title>
        <description>&lt;p&gt;Вредоносный код для мобильных устройств часто рассматривается как миф из-за ограничений аппаратного и программного обеспечения. 
Тем не менее, история показывает, что мобильные устройства также подвержены такого рода угрозам.
Рассмотрим исследование вредоносного кода на примере приложения iCalendar для мобильной операционной системы Android. Это приложение, полученное в формате APK, было найдено на одном из сайтов, распространяющих “варезное” ПО. 
Формат Android Package (APK) представляет собой незашифрованный архив, содержащий в себе метаинформацию о приложении, байт код, а также медиаресурсы (иконки, строки, xml разметки). Для получения доступа к этим файлам воспользуемся утилитой apktools, распространяемой бесплатно, запустив ее с параметром -d.  После исполнения программы, получим следующую директорию, показанную на рисунке 1.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;image fill&quot;&gt;&lt;img src=&quot;/files/andr_01.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Рисунок 1. Директория с распакованным APK&lt;/p&gt;

&lt;p&gt;В первую очередь нас интересует файл AndroidManifest.xml. В нем содержится вся необходимая для системы служебная информация. К ней относятся список Activity (экранов приложения), сервисов и широковещательных каналов. Но в прежде всего нас интересуют разрешения (permission), которые необходимо прописать в AndroidManifest, чтобы использовать те или иные возможности операционной системы. Открыв AndroidManifest, мы увидим следующие строки:&lt;/p&gt;

&lt;p&gt;&amp;lt;uses-permission android:name=”android.permission.INTERNET”/&amp;gt;&lt;br /&gt;
&amp;lt;uses-permission android:name=”android.permission.ACCESS_COARSE_LOCATION”/&amp;gt;&lt;br /&gt;
&amp;lt;uses-permission android:name=”android.permission.RESTART_PACKAGES”/&amp;gt;&lt;br /&gt;
&amp;lt;uses-permission android:name=”android.permission.RECEIVE_SMS”/&amp;gt;&lt;br /&gt;
&amp;lt;uses-permission android:name=”android.permission.SEND_SMS”/&amp;gt;&lt;br /&gt;
&amp;lt;uses-permission android:name=”android.permission.SET_WALLPAPER”/&amp;gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Если объяснить необходимость доступа к календарю и интернету еще представляется возможным, то чтение и отправка SMS-сообщений совершенно не входят в обязанности приложения-календаря. Таким образом, взглянув на содержимое файла AndroidManifest, мы достаточно точно представляем, что нужно искать в коде.
Теперь перейдем непосредственно к коду. Как правило, приложения для Android создаются с использованием языка Java, код которого компилируется в dex-файлы. Такие файлы легко поддаются декомпиляции. Получить исходный код приложения можно в два этапа. Сперва воспользуемся утилитой dex2jar, передав ей в качестве параметра путь до APK файла. После ее применения получаем файл вида &amp;lt;apk_name&amp;gt;_dex2jar.jar. Файл JAR (Java ARchive) — это архив, в котором содержится часть программы на языке JAVA. Второй этап декомпиляции – вытащить исходный код из фала jar. В этом поможет утилита Java Decompiler, которая после завершения работы выдаст директорию с исходным кодом проекта. Директория будет иметь вид, представленный на рисунке 2.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;image fill&quot;&gt;&lt;img src=&quot;/files/andr_02.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Рисунок 2. Директория с исходным кодом после декомпиляции&lt;/p&gt;

&lt;p&gt;По названию файлов (а именно a.java, aa.java и т.д.) мы можем предположить, что исходный код был обфусцирован. Такой обфускатор, предоставляемый вместе с Android SDK, меняет имена файлов, классов и методов, чтобы усложнить понимание работы программы при ее исследовании. Поскольку разработка для системы Android является Framework-ориентированной, имена классов и методов системных библиотек не будут меняться при обфускации. Эта особенность позволяет нам искать код, который имеет интересующую нас функциональность. 
    Учитывая строки, которые мы видели в файле AndroidManifest,  воспользуемся поиском по именам методов и классов. Будем искать классы, связанные с SMS, а именно класс SMSManager, описанный в документации к Android SDK.  Результаты, полученные после поиска по ключевому слову “sms”, показаны на рисунке 3.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;image fill&quot;&gt;&lt;img src=&quot;/files/andr_03.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Рисунок 3. Результаты поиска по слову “sms”&lt;/p&gt;

&lt;p&gt;Посмотрим содержимое файла iCalendar.java. Мы увидим, что он унаследован от класса Activity. Это объясняет, почему имя класса осталось неизменным после обфускации. Все классы-activity прописываются в файле AndroidManifest, а значит обфускатор не может изменить их имена, не вызвав ошибки компиляции. 
Вернемся к анализу кода. Автор приложения никак не маскирует вредоносный код. В данном случае мы видим использование функции sendTextMessage(), принимающую в качестве параметров, кроме всего прочего, номер получателя и текст сообщения.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; class=&quot;image fill&quot;&gt;&lt;img src=&quot;/files/andr_04.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Рисунок 4. Фрагмент вредоносного кода.&lt;/p&gt;

&lt;p&gt;Анализируя фрагмент, представленный на рисунке 4, можно смело утверждать, что за отправку SMS сообщения на указанный в параметрах метода номер телефона со счета абонента будет списана неприлично большая сумма. Отсюда вытекает способ монетизации, используемый автором приложения. Ничего не подозревающий пользователь скачивает приложение-календарь, которое без его ведома отправляет SMS, принося деньги в карман разработчика. 
Такой вид вредоносного ПО получил широкое распространение, поскольку создается за короткое время, не требует каких-либо затрат и специальных знаний. Однако существенным недостатком такого метода является тот факт, что перед установкой операционная система запросит у пользователя разрешение на весь функционал, прописанный в файле AndroidManifest. Отсюда следует вывод, что метод рассчитан прежде всего на невнимательного пользователя, не читающего предупреждений, любезно предоставленных разработчиками операционной системы Android.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 May 2015 03:37:10 +0300</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/05/08/reverse-apk.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/05/08/reverse-apk.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
